// mixins
@mixin fluid-type($min-font-size: 16px, $max-font-size: 24px, $lower-range: 20em, $upper-range: 75em) {

  font-size: calc(#{$min-font-size} + #{(($max-font-size / ($max-font-size * 0 + 1)) - ($min-font-size / ($min-font-size * 0 + 1)))} * ( (100vw - #{$lower-range}) / #{(($upper-range / ($upper-range * 0 + 1)) - ($lower-range / ($lower-range * 0 + 1))) * ($min-font-size / ($min-font-size * 0 + 1))}));
  
  @media screen and (max-width: $lower-range) {
    font-size: $min-font-size;
  }
  @media screen and (min-width: $upper-range){
    font-size: $max-font-size;
  }
}
@mixin reset-list {
  padding: 0;
  margin: 0;
  list-style: none;
  list-style-image: none;
}


@mixin hide-text($height: null) {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;

  @if $height {
    @warn "The `hide-text` mixin has changed and no longer requires a height. The height argument will no longer be accepted in v5.0.0";
  }
}

// grid system
// grid rows should extend %grid-row

%grid-row {
  letter-spacing: -0.31em;
  <% if (supportIE8) { %>
  *letter-spacing: normal;
  *word-spacing: -0.43em;
  <% } %>
  text-rendering: optimizespeed;
  font-family: FreeSans, Arimo, "Droid Sans", Helvetica, Arial, sans-serif;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-content: flex-start;
}

%grid-unit {
  display: inline-block;
  letter-spacing: normal;
  <% if (supportIE8) { %>
  *display: inline;
  zoom: 1;
  word-spacing: normal;
  <% } %>
  vertical-align: top;
  text-rendering: auto;
  font-family: $global-font;
}
/*
example:
.myDiv {
  @include unit(1, 1/2, $medium, 1/3, $large) {
    // other properties
  }
}
will output a 100% width div for mobiles, 50% width div for medium width device, 33.333% width div for large width devices
We can ommit the mediaqueries and have only one arguments such as @include unit(1/2) {}
 */


@mixin unit($base, $mqs...){
  @extend %grid-unit;
  width: $base * 100%;
  $i: 1;
  @while $i <= length($mqs) {
    @media #{nth($mqs, $i+1)} {
      width: nth($mqs, $i) * 100%;
    }
    $i: $i + 2;
  }
  @content;
}


// placeholders
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}